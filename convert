#!/bin/bash  

# Convert video files to mp4 and move to $VIDEODIR

# Environment variables passed by transmission
# TR_APP_VERSION
# TR_TIME_LOCALTIME
# TR_TORRENT_DIR
# TR_TORRENT_HASH
# TR_TORRENT_ID
# TR_TORRENT_NAME

# Bring in the settings

. ./settings

DOWNLOAD="${TR_TORRENT_DIR}/${TR_TORRENT_NAME}"
IS_VIDEO=false
IS_MUSIC=false


function convert_video {
	# $1 = video file
	if [[ $(basename "$1") == *[sS]ample.avi ]]; then
		logger "$(basename $0): Ignoring sample.avi file"
		return 0
	fi
	if [[ "$1" == *.mp4 ]]; then
		cp "$1" "${VIDEODIR}/"
		if [ $? -eq 0 ]; then
			return 0
		else
			return 1
		fi
	fi
	if [ -f "$1" ]; then
		FILE=$(basename "$1")
		DEST="${VIDEODIR}/${FILE%\.*}.mp4"
		logger "$(basename $0): converting ${FILE}"
		HandBrakeCLI -O -i "$1" -o "${DEST}"
		if [ -f "${DEST}" ]; then	
			return 0
		fi
	fi
	return 1

}

function is_tv_show {
	# $1 basename of video

	# if file name contains SxxExx 
	if `echo $1 | egrep -q 'S[0-9][0-9]E[0-9][0-9]'`; then
		return 0
	fi

	# Contains date format
	if `echo $1 | egrep -q '[0-9]{4}\.[0-9]{2}\.[0-9]{2}'`; then
		return 0
	fi

	return 1

}

# Construct path to place video in tv/show name/Seasion #/
function tv_show_path {

        SHOW_NAME="none"
        # get the episode expression
        if `echo $1 | egrep -q 'S[0-9][0-9]E[0-9][0-9]'`; then
                SHOW_NAME=$(echo "$1" | sed 's/\.S[0-9][0-9]E[0-9][0-9].*//' | tr \. \ )
                SHOW_SEASON=$(echo "$1" | sed 's/^.*S\([0-9][0-9]\).*/\1/' | sed 's/0.*\([0-9].*\)/\1/')
        fi
        if `echo $1 | egrep -q '[0-9]{4}\.[0-9]{2}\.[0-9]{2}'`; then
                SHOW_NAME=$(echo "$1" | sed 's/\.[0-9]\{4\}\.[0-9]\{2\}\.[0-9]\{2\}.*$//' | tr \. \ )
                # Show season isn't contained in date -- going to have to hard code for now
                case "$SHOW_NAME" in
                        'The Daily Show')
                                SHOW_SEASON=17
                                ;;
                        'The Colbert Report')
                                SHOW_SEASON=8
                                ;;
                        *)
                                SHOW_SEASON=0
                                ;;
                esac
        fi

        if [ "$SHOW_NAME" = "none" ]; then
		logger "Unable to determine show name of: $1"
                echo '.'
                return 0
        fi

        SHOW_PATH="${SHOW_NAME}/Season ${SHOW_SEASON}"

        if [ ! -d "${TVDIR}/${SHOW_PATH}" ]; then
                mkdir -p "${TVDIR}/${SHOW_PATH}"
        fi

        echo "$SHOW_PATH"

}

# Switching to PLEX -- just move the video over
function move_video {
	# $1 = video file
	if [[ $(basename "$1") == *[sS]ample.avi ]]; then
		logger "$(basename $0): Ignoring sample.avi file"
		return 0
	fi

	if $(is_tv_show  $(basename "$1")); then
		SHOW_DIR=$(tv_show_path $(basename "$1"))
		mv "$1" "${TVDIR}/${SHOW_DIR}/"
		if [ $? -eq 0 ]; then
			logger "Moved $1 to ${TVDIR}/${SHOW_DIR}"
			return 0
		fi
	else
		mv "$1" "${VIDEODIR}/"
		if [ $? -eq 0 ]; then
			logger "Moved $1 to ${VIDEODIR}/"
			return 0
		fi
	fi
	return 1


}

function send_mail_notice {
	
	if [ "$NOTIFY" != "" ]; then
		SUBJECT="Download complete"
		
		mail -s "${SUBJECT}" ${NOTIFY} <<-EOF
		Your download of "${TR_TORRENT_NAME}" has completed and is ready for use on the Roku.

		Enjoy!
		EOF
	fi

}

function send_mail_alert {
	if [ "$NOTIFY" != "" ]; then
		SUBJECT="Unknown download complete"

		mail -s "${SUBJECT}" ${NOTIFY} <<-EOF
		Your download of "${TR_TORRENT_NAME}" has completed by I don't know what kind of file it is.

		Manual interviention required before it can be used on the Roku.

		Might need to ask Roger for help.  ;)

		EOF
	fi

}

function send_mail_error {
	if [ "$NOTIFY" != "" ]; then
		SUBJECT="Error in Download"

		mail -s "${SUBJECT}" ${NOTIFY} <<-EOF
		$1

		EOF
	fi
}

function delete_torrent {
	transmission-remote -t ${TR_TORRENT_ID} --remove-and-delete
}

# single file download
if [ -f "${DOWNLOAD}" ]; then
	if [[ $(file -b "${DOWNLOAD}") == *video* ]] || [[ "${DOWNLOAD}" == *.mkv ]] || [[ "${DOWNLOAD}" == *.avi ]] || [[ "${DOWNLOAD}" == *.mp4 ]]; then
		IS_VIDEO=true
		move_video "${DOWNLOAD}"
		if [ $? -eq 0 ] ; then
			delete_torrent
			send_mail_notice
		else
			send_mail_error "Error converting video ${DOWNLOAD}"
		fi
	elif [[ $(file -b "${DOWNLOAD}") == Audio\ file* ]]; then
		IS_MUSIC=true
		mv "${DOWNLOAD}" "${MUSICDIR}/"
		delete_torrent
		send_mail_notice
	else
		logger "Unknown file type: ${DOWNLOAD}"
		send_mail_alert
	fi
	exit 0
fi

# download is a directory of multiple files
if [ -d "${DOWNLOAD}" ]; then
	for FILE in $(find "${DOWNLOAD}" -type f -exec $(dirname $0)/base64str '{}' \; );do
		FILE_NAME="$(echo -n "${FILE}" | base64 -d)"
		if [[ $(file -b "${FILE_NAME}") == *video* ]] || [[ "${FILE_NAME}" == *.mkv ]] || [[ "${FILE_NAME}" == *.avi ]] || [[ "${FILE_NAME}" == *.mp4 ]]; then
			IS_VIDEO=true
			VIDEO_CONVERTED=false
			move_video "${FILE_NAME}"
			if [ $? -eq 0 ]; then
				VIDEO_CONVERTED=true
			fi
		fi
	done
	if $IS_VIDEO && $VIDEO_CONVERTED ; then
		delete_torrent
		send_mail_notice
	else
		send_mail_error "Error converting video files: ${DOWNLOAD}"
	fi
fi

if ! ${IS_VIDEO} ; then
	if $(find "${DOWNLOAD}" -iname "*.mp3" | read); then
		IS_MUSIC=true
		# delete any non mp3 files (playlists, torrent advertising, etc) but keep album art
		find "${DOWNLOAD}" -type f \! -iname "*.mp3" \! -iname "*.jpg" \! -iname "*.png" -exec rm -f '{}' \;
		mv "${DOWNLOAD}" "${MUSICDIR}/"
		chmod 775 "${MUSICDIR}/${TR_TORRENT_NAME}"
		find "${MUSICDIR}/${TR_TORRENT_NAME}" -type d -exec chmod 775 '{}' \;
		delete_torrent
		send_mail_notice
	fi
fi
